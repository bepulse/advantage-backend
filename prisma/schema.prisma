datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- Enums ----------
enum UserRole {
  ADMIN
  CUSTOMER
  OPERATOR
}

enum AddressType {
  HOME
  BILLING
  SHIPPING
  OTHER
}

enum Relationship {
  SPOUSE
  CHILD
  PARTNER
  PARENT
  OTHER
}

enum DocumentKind {
  CPF
  RG
  CNH
  PROOF_OF_ADDRESS
  MARRIAGE_CERTIFICATE
  OTHER
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  cpf       String  @unique
  birthDate DateTime?
  email     String  @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String? // Email of user who created this record
  updatedBy String? // Email of user who last updated this record

  // relations - mudança para relação 1:1
  address    Address?
  contract   Contract?
  dependents Dependent[]
  users      User[] // customer portal users (role=CUSTOMER)
  documents  Document[]  @relation("CustomerDocuments")

  @@index([name])
  @@index([cpf])
}

model Address {
  customerId String      @id // customerId agora é a chave primária
  type       AddressType @default(HOME)
  street     String
  number     String
  complement String?
  district   String // bairro
  city       String
  state      String // e.g. "SP"
  zipcode    String // CEP, digits only
  country    String      @default("BR")
  isDefault  Boolean     @default(true) // sempre true em relação 1:1
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  createdBy  String? // Email of user who created this record
  updatedBy  String? // Email of user who last updated this record

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([zipcode])
  @@index([city, state])
}

model Dependent {
  id           String       @id @default(uuid())
  customerId   String
  name         String
  cpf          String?      @unique // optional for minors; unique when present
  birthDate    DateTime?
  eligible     Boolean      @default(false)
  relationship Relationship
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  createdBy    String? // Email of user who created this record
  updatedBy    String? // Email of user who last updated this record

  customer  Customer   @relation(fields: [customerId], references: [id])
  documents Document[] @relation("DependentDocuments")

  @@index([customerId])
  @@index([relationship])
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  role         UserRole
  // If role=CUSTOMER, link to the owning customer; for ADMIN/OPERATOR this is NULL
  customerId   String?
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    String? // Email of user who created this record
  updatedBy    String? // Email of user who last updated this record

  customer          Customer?  @relation(fields: [customerId], references: [id])
  uploadedDocuments Document[] @relation("DocumentsUploadedByUser")

  @@index([role])
  @@index([customerId])
}

// ---------- Documents ----------
// A single table that can belong to either a Customer OR a Dependent.
// Exactly one of (customerId, dependentId) SHOULD be non-null.
// Prisma doesn't support check constraints natively; see note below.
model Document {
  id           String       @id @default(uuid())
  kind         DocumentKind
  description  String?
  fileName     String
  filePath     String // path/URL or storage key (e.g., s3://... or /uploads/...)
  mimeType     String?
  sizeBytes    BigInt?
  checksum     String? // e.g., SHA-256 for dedup
  uploadedById String? // User who uploaded
  uploadedAt   DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  createdBy    String? // Email of user who created this record
  updatedBy    String? // Email of user who last updated this record

  // Ownership (polymorphic: one of these should be set)
  customerId  String?
  dependentId String?

  // Relations
  customer   Customer?  @relation("CustomerDocuments", fields: [customerId], references: [id])
  dependent  Dependent? @relation("DependentDocuments", fields: [dependentId], references: [id])
  uploadedBy User?      @relation("DocumentsUploadedByUser", fields: [uploadedById], references: [id])

  @@index([customerId])
  @@index([dependentId])
  @@index([kind])
  @@index([uploadedAt])
}

model Contract {
  id           String   @id @default(uuid())
  customerId   String?  @unique
  envelopeId   String   @unique
  status       String   // sent, delivered, completed, declined, voided
  documentType String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?
  updatedBy    String?

  customer  Customer?  @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([status])
}